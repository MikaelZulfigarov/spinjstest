"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var requireModule_1 = require("../requireModule");
var postCssDefaultConfig = function () {
    return {
        plugins: function () { return [
            requireModule_1.default('autoprefixer')({
                browsers: ['last 2 versions', 'ie >= 9']
            })
        ]; }
    };
};
var CssProcessorPlugin = (function () {
    function CssProcessorPlugin() {
    }
    CssProcessorPlugin.prototype.configure = function (builder, spin) {
        var stack = builder.stack;
        var dev = spin.dev;
        if (stack.hasAll('webpack') && !stack.hasAny('dll')) {
            var createRule = void 0;
            var rules = [];
            var postCssLoader_1 = requireModule_1.default.probe('postcss-loader');
            var useDefaultPostCss_1 = spin.options.useDefaultPostCss || false;
            if (stack.hasAny('server')) {
                createRule = function (ext, ruleList) { return ({
                    test: new RegExp("\\." + ext + "$"),
                    use: [
                        { loader: requireModule_1.default.resolve('isomorphic-style-loader') },
                        { loader: requireModule_1.default.resolve('css-loader'), options: { sourceMap: true } }
                    ]
                        .concat(postCssLoader_1
                        ? {
                            loader: postCssLoader_1,
                            options: useDefaultPostCss_1 ? __assign({}, postCssDefaultConfig(), { sourceMap: true }) : { sourceMap: true }
                        }
                        : [])
                        .concat(ruleList)
                }); };
            }
            else if (stack.hasAny('web')) {
                var ExtractTextPlugin_1;
                if (!dev) {
                    ExtractTextPlugin_1 = requireModule_1.default('extract-text-webpack-plugin');
                }
                createRule = function (ext, ruleList) {
                    var plugin;
                    if (!dev) {
                        plugin = new ExtractTextPlugin_1({ filename: "[name].[contenthash]_" + ext + ".css" });
                        builder.config.plugins.push(plugin);
                    }
                    return {
                        test: new RegExp("\\." + ext + "$"),
                        use: dev
                            ? [
                                { loader: requireModule_1.default.resolve('style-loader') },
                                { loader: requireModule_1.default.resolve('css-loader'), options: { sourceMap: true, importLoaders: 1 } }
                            ]
                                .concat(postCssLoader_1
                                ? {
                                    loader: postCssLoader_1,
                                    options: useDefaultPostCss_1
                                        ? __assign({}, postCssDefaultConfig(), { sourceMap: true }) : { sourceMap: true }
                                }
                                : [])
                                .concat(ruleList)
                            : plugin.extract({
                                fallback: requireModule_1.default.resolve('style-loader'),
                                use: [
                                    {
                                        loader: requireModule_1.default.resolve('css-loader'),
                                        options: { importLoaders: postCssLoader_1 ? 1 : 0 }
                                    }
                                ]
                                    .concat(postCssLoader_1
                                    ? {
                                        loader: postCssLoader_1,
                                        options: useDefaultPostCss_1 ? postCssDefaultConfig() : {}
                                    }
                                    : [])
                                    .concat(ruleList ? ruleList.map(function (rule) { return rule.loader; }) : [])
                            })
                    };
                };
            }
            if (createRule && stack.hasAny('css')) {
                rules.push(createRule('css', []));
            }
            if (createRule && stack.hasAny('sass')) {
                rules.push(createRule('scss', [{ loader: requireModule_1.default.resolve("sass-loader"), options: { sourceMap: true } }]));
            }
            if (createRule && stack.hasAny('less')) {
                rules.push(createRule('less', [{ loader: requireModule_1.default.resolve("less-loader"), options: { sourceMap: true } }]));
            }
            builder.config = spin.merge(builder.config, {
                module: {
                    rules: rules
                }
            });
        }
    };
    return CssProcessorPlugin;
}());
exports.default = CssProcessorPlugin;
//# sourceMappingURL=CssProcessorPlugin.js.map