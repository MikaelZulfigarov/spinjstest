"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var requireModule_1 = require("../requireModule");
var JSRuleFinder_1 = require("./shared/JSRuleFinder");
var TypeScriptPlugin = (function () {
    function TypeScriptPlugin() {
    }
    TypeScriptPlugin.prototype.configure = function (builder, spin) {
        var stack = builder.stack;
        if (stack.hasAll(['ts', 'webpack'])) {
            var jsRuleFinder_1 = new JSRuleFinder_1.default(builder);
            var tsRule = jsRuleFinder_1.findAndCreateTSRule();
            tsRule.test = /\.ts$/;
            tsRule.use = [
                {
                    loader: requireModule_1.default.resolve('awesome-typescript-loader'),
                    options: __assign({}, builder.tsLoaderOptions)
                }
            ];
            builder.config.resolve.extensions = ['.']
                .map(function (prefix) { return jsRuleFinder_1.extensions.map(function (ext) { return prefix + ext; }); })
                .reduce(function (acc, val) { return acc.concat(val); });
            if (!stack.hasAny('dll')) {
                for (var _i = 0, _a = Object.keys(builder.config.entry); _i < _a.length; _i++) {
                    var key = _a[_i];
                    var entry = builder.config.entry[key];
                    for (var idx = 0; idx < entry.length; idx++) {
                        var item = entry[idx];
                        if (item.startsWith('./') &&
                            ['.js', '.jsx', '.ts', '.tsx'].indexOf(path.extname(item)) >= 0 &&
                            item.indexOf('node_modules') < 0) {
                            var tsItem = './' + path.join(path.dirname(item), path.basename(item, path.extname(item))) + '.ts';
                            if (!fs.existsSync(item) && fs.existsSync(tsItem)) {
                                entry[idx] = tsItem;
                            }
                        }
                    }
                }
            }
        }
    };
    return TypeScriptPlugin;
}());
exports.default = TypeScriptPlugin;
//# sourceMappingURL=TypeScriptPlugin.js.map